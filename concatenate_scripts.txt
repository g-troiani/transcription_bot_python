
# ************************************************************
#  core/audio_utils.py
# ************************************************************

"""
Audio utilities module.

Provides helper functions for converting raw PCM audio to WAV format.
"""

import subprocess

def convert_pcm_to_wav(pcm_file: str, wav_file: str) -> None:
    """
    Convert a raw PCM file to a WAV file using FFmpeg.
    
    Args:
        pcm_file (str): Path to the input PCM file.
        wav_file (str): Path to the output WAV file.
    """
    subprocess.run([
        "ffmpeg", "-y",
        "-f", "s16le",
        "-ar", "48000",
        "-ac", "1",
        "-i", pcm_file,
        wav_file
    ], check=True)


# ************************************************************
#  core/config.py
# ************************************************************

"""
Configuration module for the transcription bot.

This module pulls configuration variables from the environment.
"""

import os

DISCORD_TOKEN = os.getenv("DISCORD_TOKEN", "")
GUILD_ID = os.getenv("GUILD_ID", "")
APPLICATION_ID = os.getenv("APPLICATION_ID", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")


# ************************************************************
#  core/summarizer.py
# ************************************************************

"""
Summarizer module.

Provides a function to summarize a conversation transcript using OpenAI's ChatCompletion API.
"""

import openai
from core.config import OPENAI_API_KEY

openai.api_key = OPENAI_API_KEY

def summarize_transcript(transcript: str) -> str:
    """
    Summarize the given conversation transcript using OpenAI's ChatCompletion API.
    
    Args:
        transcript (str): The full conversation transcript.
        
    Returns:
        str: A summarized version of the conversation.
    """
    print("[DEBUG] Summarization started.")
    if not transcript:
        print("[DEBUG] No transcript provided for summarization.")
        return "No conversation to summarize."
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant that summarizes conversations."},
                {"role": "user", "content": f"Summarize the following conversation:\n{transcript}"}
            ],
            temperature=0.5,
            max_tokens=150
        )
        summary = response.choices[0].message.content.strip() if response.choices else "No summary available."
        print(f"[DEBUG] Summarization completed successfully. Summary: {summary}")
        return summary
    except Exception as e:
        print(f"[DEBUG] Error generating summary: {e}")
        return f"Error generating summary: {e}"


# ************************************************************
#  core/transcription_logic.py
# ************************************************************

# ************************************************************
#  core/transcription_logic.py
# ************************************************************

"""
Transcription logic module.

Manages sessions for multiple guilds, buffers per-user audio, and performs
near-real-time transcription using the RealtimeSTT library.
"""

import os
import threading
import time
import uuid
from typing import Dict, List

from core import audio_utils
from RealtimeSTT import AudioToTextRecorder  # Import the recorder class from RealtimeSTT

class Session:
    """
    Represents a transcription session for a guild.
    
    Attributes:
        is_recording (bool): Whether the session is currently recording.
        user_transcripts (Dict[int, List[str]]): Accumulated transcript segments per user.
        user_names (Dict[int, str]): Mapping from user ID to display name.
        audio_buffers (Dict[int, bytearray]): Audio buffers (PCM) for each user.
    """
    def __init__(self) -> None:
        self.is_recording: bool = False
        self.user_transcripts: Dict[int, List[str]] = {}
        self.user_names: Dict[int, str] = {}
        self.audio_buffers: Dict[int, bytearray] = {}

    def append_final_line(self, user_id: int, text: str) -> None:
        """
        Append transcribed text for a given user.
        
        Args:
            user_id (int): The user's ID.
            text (str): The transcribed text.
        """
        self.user_transcripts.setdefault(user_id, []).append(text)
        print(f"[DEBUG] Appended transcript for user {user_id}: {text}")

    def get_combined_transcript(self) -> str:
        """
        Get the full transcript of the session with user labels.
        
        Returns:
            str: The aggregated transcript.
        """
        lines = []
        for uid, texts in self.user_transcripts.items():
            name = self.user_names.get(uid, f"User {uid}")
            for t in texts:
                lines.append(f"{name}:\n{t}\n")
        transcript = "\n".join(lines)
        print(f"[DEBUG] Combined transcript length: {len(transcript)} characters")
        return transcript

class SessionManager:
    """
    Manages transcription sessions for multiple guilds.
    
    Provides methods to start and stop recording, process audio chunks,
    and flush audio buffers to obtain transcriptions.
    """
    def __init__(self) -> None:
        self.sessions: Dict[int, Session] = {}
        threading.Thread(target=self._buffer_flusher, daemon=True).start()
        print("[DEBUG] SessionManager initialized and buffer flusher started.")

    def get_or_create_session(self, guild_id: int) -> Session:
        """
        Retrieve or create a transcription session for a guild.
        
        Args:
            guild_id (int): The Discord guild ID.
        
        Returns:
            Session: The transcription session.
        """
        if guild_id not in self.sessions:
            self.sessions[guild_id] = Session()
            print(f"[DEBUG] Created new session for guild {guild_id}")
        return self.sessions[guild_id]

    def remove_session(self, guild_id: int) -> None:
        """
        Remove the transcription session for a guild.
        
        Args:
            guild_id (int): The Discord guild ID.
        """
        if guild_id in self.sessions:
            del self.sessions[guild_id]
            print(f"[DEBUG] Removed session for guild {guild_id}")

    def start_recording(self, guild_id: int) -> Session:
        """
        Start a transcription session for a guild.
        
        Args:
            guild_id (int): The Discord guild ID.
        
        Returns:
            Session: The started session.
        """
        session = self.get_or_create_session(guild_id)
        session.is_recording = True
        print(f"[DEBUG] Recording started for guild {guild_id}")
        return session

    def stop_recording(self, guild_id: int) -> str:
        """
        Stop recording for a guild and return the full transcript.
        
        Args:
            guild_id (int): The Discord guild ID.
        
        Returns:
            str: The aggregated transcript.
        """
        session = self.get_or_create_session(guild_id)
        session.is_recording = False
        print(f"[DEBUG] Recording stopped for guild {guild_id}")
        for user_id in list(session.audio_buffers.keys()):
            self._flush_buffer(session, user_id)
        transcript = session.get_combined_transcript()
        return transcript

    def process_audio_chunk(self, guild_id: int, user_id: int, pcm_data: bytes) -> None:
        """
        Append a PCM audio chunk to the buffer for a user.
        
        Args:
            guild_id (int): The Discord guild ID.
            user_id (int): The user's ID.
            pcm_data (bytes): Raw PCM audio data.
        """
        session = self.get_or_create_session(guild_id)
        if not session.is_recording:
            print(f"[DEBUG] Received audio chunk for user {user_id}, but recording is not active.")
            return
        session.audio_buffers.setdefault(user_id, bytearray()).extend(pcm_data)
        print(f"[DEBUG] Processed audio chunk for user {user_id}; buffer size now: {len(session.audio_buffers[user_id])} bytes.")

    def set_user_name(self, guild_id: int, user_id: int, display_name: str) -> None:
        """
        Set or update the display name for a user in a session.
        
        Args:
            guild_id (int): The Discord guild ID.
            user_id (int): The user's ID.
            display_name (str): The user's display name.
        """
        session = self.get_or_create_session(guild_id)
        session.user_names[user_id] = display_name
        print(f"[DEBUG] Set display name for user {user_id} to '{display_name}'.")

    def _buffer_flusher(self) -> None:
        """
        Background thread that flushes audio buffers periodically.
        """
        while True:
            for session in self.sessions.values():
                if session.is_recording:
                    for user_id in list(session.audio_buffers.keys()):
                        if session.audio_buffers[user_id]:
                            print(f"[DEBUG] Flushing buffer for user {user_id}; buffer length: {len(session.audio_buffers[user_id])} bytes.")
                            self._flush_buffer(session, user_id)
            time.sleep(2)

    def _flush_buffer(self, session: Session, user_id: int) -> None:
        """
        Flush the audio buffer for a user: convert PCM to WAV and transcribe.
        
        Args:
            session (Session): The transcription session.
            user_id (int): The user's ID.
        """
        buffer_data = bytes(session.audio_buffers.get(user_id, b""))
        print(f"[DEBUG] _flush_buffer: Buffer length for user {user_id}: {len(buffer_data)} bytes.")
        if not buffer_data:
            print(f"[DEBUG] _flush_buffer: No data to flush for user {user_id}.")
            return
        session.audio_buffers[user_id] = bytearray()  # Clear buffer

        pcm_filename = f"/tmp/{uuid.uuid4()}.pcm"
        wav_filename = f"/tmp/{uuid.uuid4()}.wav"
        with open(pcm_filename, "wb") as f:
            f.write(buffer_data)
        try:
            print(f"[DEBUG] _flush_buffer: Converting PCM to WAV for user {user_id}...")
            audio_utils.convert_pcm_to_wav(pcm_filename, wav_filename)
            print(f"[DEBUG] _flush_buffer: Conversion complete for user {user_id}.")
            # Create an AudioToTextRecorder instance using the "tiny" model.
            recorder = AudioToTextRecorder(model="tiny")
            transcript_text = recorder.transcribe_file(wav_filename).strip()
            print(f"[DEBUG] _flush_buffer: Transcribed text for user {user_id}: {transcript_text}")
            session.append_final_line(user_id, transcript_text)
        except Exception as e:
            print(f"[DEBUG] _flush_buffer: Transcription error for user {user_id}: {e}")
        finally:
            if os.path.exists(pcm_filename):
                os.remove(pcm_filename)
            if os.path.exists(wav_filename):
                os.remove(wav_filename)


# ************************************************************
#  integrations/discord_bot.py
# ************************************************************

"""
Discord integration module for the live transcription bot.

This module provides a minimal Discord bot that can join a voice channel,
start a transcription session (including capturing audio via a custom sink),
post the transcript and summary, and leave the channel.
It includes detailed debug statements to help trace command interactions and overall flow.
"""

import os
import discord
from discord import app_commands
from discord.ext import commands
from core.config import DISCORD_TOKEN, GUILD_ID
from core.transcription_logic import SessionManager
from core.summarizer import summarize_transcript

# Create a global session manager for transcription.
session_manager = SessionManager()

# Set up minimal intents.
intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.guilds = True

# Instantiate the bot.
bot = commands.Bot(command_prefix="!", intents=intents)

##############################
# Audio Sink Implementation  #
##############################

class MyAudioSink:
    """
    A minimal audio sink that captures PCM data and passes it to the session manager.
    
    This sink is intended to be used with a voice client's recording method.
    """
    def __init__(self, guild_id: int, user_id: int, session_manager: SessionManager):
        """
        Initialize the audio sink.
        
        Args:
            guild_id (int): The guild ID.
            user_id (int): The ID of the user whose audio is being recorded.
            session_manager (SessionManager): The session manager instance.
        """
        self.guild_id = guild_id
        self.user_id = user_id
        self.session_manager = session_manager
        print(f"[DEBUG] MyAudioSink initialized for user {user_id} in guild {guild_id}.")

    def write(self, data: bytes):
        """
        Called when a chunk of PCM audio data is received.
        
        Args:
            data (bytes): The raw PCM audio data.
        """
        print(f"[DEBUG] MyAudioSink received {len(data)} bytes for user {self.user_id}.")
        self.session_manager.process_audio_chunk(self.guild_id, self.user_id, data)

    def cleanup(self):
        """
        Called when recording is finished to perform any necessary cleanup.
        """
        print(f"[DEBUG] MyAudioSink cleanup for user {self.user_id}.")

def finished_callback(sink, channel):
    """
    Callback function called when the voice client's recording finishes.
    
    Args:
        sink (MyAudioSink): The audio sink used during recording.
        channel (discord.TextChannel): The text channel associated with the recording session.
    """
    print(f"[DEBUG] Finished recording for user {sink.user_id} in guild {sink.guild_id}.")

##############################
# End Audio Sink Section     #
##############################

@bot.event
async def on_interaction(interaction: discord.Interaction):
    """
    Event handler that logs every interaction received.
    """
    print("[DEBUG] on_interaction event received.")
    print("   Type:", interaction.type)
    print("   User:", interaction.user)
    print("   Data:", interaction.data)

class TranscriptionCog(commands.Cog):
    """
    Cog containing slash commands for live transcription.
    """
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        print("[DEBUG] TranscriptionCog loaded.")

    @app_commands.command(name="join", description="Join your voice channel")
    async def join(self, interaction: discord.Interaction) -> None:
        """
        Join the voice channel of the invoking user.
        """
        print(f"[DEBUG] /join command invoked by {interaction.user} in guild {interaction.guild.id}")
        print(f"[DEBUG] Interaction data: {interaction.data}")
        if not interaction.user.voice or not interaction.user.voice.channel:
            try:
                await interaction.response.send_message("Join a voice channel first.", ephemeral=True)
                print("[DEBUG] /join: User is not in a voice channel.")
            except Exception as e:
                print("[DEBUG] /join: Exception sending message:", e)
            return
        channel = interaction.user.voice.channel
        if interaction.guild.voice_client:
            try:
                await interaction.response.send_message("Already in a voice channel.", ephemeral=True)
                print("[DEBUG] /join: Bot already connected to a voice channel.")
            except Exception as e:
                print("[DEBUG] /join: Exception sending 'already connected' message:", e)
            return
        try:
            await interaction.response.defer()
            vc = await channel.connect()
            print(f"[DEBUG] /join: Successfully connected to {channel.name}")
            await interaction.followup.send(f"Joined {channel.name}.")
        except Exception as e:
            print(f"[DEBUG] /join: Error connecting to voice channel: {e}")
            try:
                await interaction.followup.send("Failed to join the voice channel.", ephemeral=True)
            except Exception as inner_e:
                print("[DEBUG] /join: Exception sending failure message:", inner_e)

    @app_commands.command(name="record", description="Start transcription")
    async def record(self, interaction: discord.Interaction) -> None:
        """
        Start the transcription session for the guild.
        """
        print(f"[DEBUG] /record command invoked by {interaction.user} in guild {interaction.guild.id}")
        try:
            session_manager.start_recording(interaction.guild.id)
            await interaction.response.send_message("Recording started.")
            print("[DEBUG] /record: Recording session started.")
        except Exception as e:
            print("[DEBUG] /record: Exception occurred:", e)
            await interaction.response.send_message("Error starting recording.", ephemeral=True)

    @app_commands.command(name="joinrecord", description="Join voice channel and start transcription")
    async def joinrecord(self, interaction: discord.Interaction) -> None:
        """
        Join the user's voice channel and start the transcription session.
        Combines /join and /record, and attaches an audio sink to capture PCM audio.
        """
        print(f"[DEBUG] /joinrecord command invoked by {interaction.user} in guild {interaction.guild.id}")
        await interaction.response.defer()
        if not interaction.user.voice or not interaction.user.voice.channel:
            await interaction.followup.send("Join a voice channel first.", ephemeral=True)
            print("[DEBUG] /joinrecord: User not in a voice channel.")
            return
        channel = interaction.user.voice.channel
        try:
            if not interaction.guild.voice_client:
                vc = await channel.connect()
                print(f"[DEBUG] /joinrecord: Connected to {channel.name}.")
            else:
                vc = interaction.guild.voice_client
                print("[DEBUG] /joinrecord: Already connected to a voice channel.")
        except Exception as e:
            print(f"[DEBUG] /joinrecord: Error connecting to voice channel: {e}")
            await interaction.followup.send("Failed to connect to the voice channel.", ephemeral=True)
            return
        try:
            session_manager.start_recording(interaction.guild.id)
            # Check if the voice client supports audio receiving.
            if not hasattr(vc, "start_recording"):
                error_msg = "Voice receiving is not supported by this bot's voice client. No audio will be captured."
                print(f"[DEBUG] /joinrecord: {error_msg}")
                await interaction.followup.send(error_msg, ephemeral=True)
                return
            # Create an audio sink to capture audio.
            sink = MyAudioSink(interaction.guild.id, interaction.user.id, session_manager)
            try:
                vc.start_recording(sink, finished_callback, interaction.channel)
                print(f"[DEBUG] /joinrecord: Voice recording started with sink for user {interaction.user.id}.")
            except Exception as e:
                print("[DEBUG] /joinrecord: Error starting voice recording with sink:", e)
                await interaction.followup.send("Error starting voice recording.", ephemeral=True)
                return
            await interaction.followup.send(f"Joined {channel.name} and started recording.")
            print(f"[DEBUG] /joinrecord: Recording started in {channel.name}.")
        except Exception as e:
            print(f"[DEBUG] /joinrecord: Error starting recording: {e}")
            await interaction.followup.send("Error starting recording.", ephemeral=True)

    @app_commands.command(name="stop", description="Stop transcription and post transcript")
    async def stop(self, interaction: discord.Interaction) -> None:
        """
        Stop the transcription session and post the transcript and summary.
        """
        print(f"[DEBUG] /stop command invoked by {interaction.user} in guild {interaction.guild.id}")
        await interaction.response.defer()
        try:
            transcript = session_manager.stop_recording(interaction.guild.id)
            print("[DEBUG] /stop: Transcript obtained. Length:", len(transcript))
            if not transcript.strip():
                print("[DEBUG] /stop: Transcript is empty.")
                await interaction.followup.send("No transcript available.")
                return
            await interaction.followup.send("Transcript:")
            await interaction.channel.send(transcript)
            print("[DEBUG] /stop: Transcript posted in channel.")
            summary = summarize_transcript(transcript)
            if not summary.strip():
                print("[DEBUG] /stop: Summary is empty.")
                summary = "No summary available."
            await interaction.channel.send(f"Summary:\n{summary}")
            print("[DEBUG] /stop: Summary posted in channel.")
        except Exception as e:
            print("[DEBUG] /stop: Error during stop command:", e)
            await interaction.followup.send("Error stopping transcription.", ephemeral=True)

    @app_commands.command(name="leave", description="Leave the voice channel")
    async def leave(self, interaction: discord.Interaction) -> None:
        """
        Disconnect the bot from the voice channel and remove the session.
        """
        print(f"[DEBUG] /leave command invoked by {interaction.user} in guild {interaction.guild.id}")
        try:
            if interaction.guild.voice_client:
                await interaction.guild.voice_client.disconnect()
                session_manager.remove_session(interaction.guild.id)
                await interaction.response.send_message("Left voice channel.")
                print("[DEBUG] /leave: Disconnected from voice channel.")
            else:
                await interaction.response.send_message("Not connected to any voice channel.", ephemeral=True)
                print("[DEBUG] /leave: No active voice connection found.")
        except Exception as e:
            print("[DEBUG] /leave: Exception during disconnect:", e)
            await interaction.response.send_message("Error leaving the voice channel.", ephemeral=True)

@bot.event
async def on_ready() -> None:
    """
    Event handler triggered when the bot is ready.
    
    If PROPAGATE_ONLY is set in the environment, sync slash commands to the guild.
    Otherwise, simply print "Bot is online!".
    """
    if os.getenv("PROPAGATE_ONLY"):
        print("[DEBUG] Propagation mode: Syncing commands...")
        try:
            guild = discord.Object(id=int(GUILD_ID))
            synced = await bot.tree.sync(guild=guild)
            print("[DEBUG] Commands synced:", [cmd.name for cmd in synced])
        except Exception as e:
            print("[DEBUG] Error syncing commands:", e)
    print("Bot is online!")

async def run_discord_bot() -> None:
    """
    Start the Discord bot.
    
    Adds the TranscriptionCog to the bot and starts the bot using the Discord token.
    """
    print("[DEBUG] Adding TranscriptionCog to the bot...")
    await bot.add_cog(TranscriptionCog(bot))
    print("[DEBUG] Starting bot with token.")
    await bot.start(DISCORD_TOKEN)

if __name__ == "__main__":
    import asyncio
    asyncio.run(run_discord_bot())


# ************************************************************
#  integrations/propagate_commands copy.py
# ************************************************************

"""
Propagation commands module.

This module is used to propagate slash commands to a guild.
It sets an environment flag to avoid duplicate cog addition and
overrides the on_ready event to perform command synchronization,
print debug information, and then close the bot and its HTTP session.
"""

import os
os.environ["PROPAGATE_ONLY"] = "1"  # Signal that we are only propagating commands

import sys
import asyncio
import discord
from discord import app_commands
import logging
from discord.ext import commands

# Append the project root to sys.path so modules can be imported.
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from integrations.discord_bot import bot, TranscriptionCog
from core.config import DISCORD_TOKEN, GUILD_ID

# Set logging levels for detailed debug output.
logging.getLogger('discord').setLevel(logging.DEBUG)
logging.getLogger('discord.http').setLevel(logging.DEBUG)

try:
    converted_guild_id = int(GUILD_ID)
except ValueError:
    print("ERROR: GUILD_ID is not a valid integer!")
    converted_guild_id = None
if converted_guild_id is None:
    print("ERROR: GUILD_ID is missing or invalid in your environment.")

@app_commands.guilds(discord.Object(id=converted_guild_id))
class TranscriptionCommands(commands.Cog):
    """
    Cog for testing guild-scoped commands.
    """
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(
        name="record_test",
        description="Start a transcription session. (Example in propagate_commands.py)"
    )
    @app_commands.default_permissions(permissions=2150747648)
    async def record(self, interaction: discord.Interaction) -> None:
        print("[DEBUG] /record_test command invoked")
        await interaction.response.send_message("This is a test guild-scoped command from propagate_commands.py.")

# Override the on_ready event for propagation purposes.
@bot.event
async def on_ready() -> None:
    """
    Event handler for when the bot is ready.
    
    Syncs the slash commands to the specified guild, prints debug information,
    then closes the bot and ensures the HTTP client session is properly closed.
    """
    print("[DEBUG] Propagation bot is ready.")
    guild = discord.Object(id=converted_guild_id)
    try:
        synced = await bot.tree.sync(guild=guild)
        print("[DEBUG] Commands synced for guild", converted_guild_id)
        print("[DEBUG] Synced commands:", [cmd.name for cmd in synced])
    except Exception as e:
        print("[DEBUG] Error during propagation:", e)
    finally:
        await bot.close()
        await asyncio.sleep(1)  # Give cleanup time.
        if hasattr(bot, "http") and bot.http.session and not bot.http.session.closed:
            await bot.http.session.close()
            print("[DEBUG] HTTP session closed.")
        else:
            print("[DEBUG] HTTP session already closed.")

async def propagate_slash_commands() -> None:
    """
    Propagate and sync guild-scoped commands.
    
    Clears existing global commands for the target guild, adds both the testing cog
    and the main transcription cog (if not already present), copies global commands
    to the guild's command tree, and then starts the bot.
    """
    guild = discord.Object(id=converted_guild_id)
    
    print("[DEBUG] Global commands before clearing:", [cmd.name for cmd in bot.tree.get_commands()])
    bot.tree.clear_commands(guild=guild)
    print("[DEBUG] Global commands after clearing for guild:", [cmd.name for cmd in bot.tree.get_commands()])
    
    await bot.add_cog(TranscriptionCommands(bot))
    if not bot.get_cog("TranscriptionCog"):
        await bot.add_cog(TranscriptionCog(bot))
    print("[DEBUG] Global commands after adding cogs:", [cmd.name for cmd in bot.tree.get_commands()])
    
    bot.tree.copy_global_to(guild=guild)
    guild_commands = bot.tree.get_commands(guild=guild)
    print("[DEBUG] Guild command tree after copying global commands:", [cmd.name for cmd in guild_commands])
    
    print("[DEBUG] Starting bot for propagation...")
    await bot.start(DISCORD_TOKEN)

def main() -> None:
    """
    Create and run a new event loop to propagate slash commands.
    
    Ensures that asynchronous generators are properly shutdown.
    """
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(propagate_slash_commands())
    finally:
        loop.run_until_complete(loop.shutdown_asyncgens())
        loop.close()

if __name__ == "__main__":
    main()


# ************************************************************
#  integrations/propagate_commands.py
# ************************************************************

"""
Propagation commands module.

This module is used to propagate slash commands to a guild. It sets an environment
flag to avoid duplicate cog addition and overrides the on_ready event to perform command
synchronization, print detailed debug information, and then close the bot and its HTTP session.
"""

import os
os.environ["PROPAGATE_ONLY"] = "1"  # Signal that we are only propagating commands

import sys
import asyncio
import discord
from discord import app_commands
import logging
from discord.ext import commands

# Append the project root to sys.path so modules can be imported.
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from integrations.discord_bot import bot, TranscriptionCog
from core.config import DISCORD_TOKEN, GUILD_ID

logging.getLogger('discord').setLevel(logging.DEBUG)
logging.getLogger('discord.http').setLevel(logging.DEBUG)

try:
    converted_guild_id = int(GUILD_ID)
    print(f"[DEBUG] GUILD_ID converted to integer: {converted_guild_id}")
except ValueError:
    print("[ERROR] GUILD_ID is not a valid integer!")
    converted_guild_id = None
if converted_guild_id is None:
    print("[ERROR] GUILD_ID is missing or invalid in your environment.")

@app_commands.guilds(discord.Object(id=converted_guild_id))
class TranscriptionCommands(commands.Cog):
    """
    Cog for testing guild-scoped commands.
    """
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        print("[DEBUG] TranscriptionCommands cog initialized.")

    @app_commands.command(
        name="record_test",
        description="Start a transcription session. (Example in propagate_commands.py)"
    )
    @app_commands.default_permissions(permissions=2150747648)
    async def record(self, interaction: discord.Interaction) -> None:
        print("[DEBUG] /record_test command invoked")
        await interaction.response.send_message("This is a test guild-scoped command from propagate_commands.py.")

@bot.event
async def on_ready() -> None:
    """
    Overridden on_ready event for propagation mode.

    Syncs the slash commands to the guild, prints detailed debug information,
    then waits before initiating shutdown.
    """
    print("[DEBUG] Propagation bot is ready. Beginning command sync...")
    try:
        guild = discord.Object(id=int(GUILD_ID))
        synced = await bot.tree.sync(guild=guild)
        print(f"[DEBUG] Commands synced for guild {converted_guild_id}")
        print("[DEBUG] Synced commands:", [cmd.name for cmd in synced])
    except Exception as e:
        print("[DEBUG] Error during propagation sync:", e)
    print("[DEBUG] Waiting 5 seconds before closing bot...")
    await asyncio.sleep(5)
    print("[DEBUG] Preparing to close bot after delay.")
    if hasattr(bot, "http") and bot.http.session:
        print(f"[DEBUG] HTTP session before close: {bot.http.session} Closed: {bot.http.session.closed}")
    else:
        print("[DEBUG] No HTTP session found before close.")
    try:
        print("[DEBUG] Calling bot.close() with timeout...")
        await asyncio.wait_for(bot.close(), timeout=10)
        print("[DEBUG] bot.close() completed.")
    except asyncio.TimeoutError:
        print("[DEBUG] bot.close() timed out!")
    except Exception as e:
        print("[DEBUG] Exception during bot.close():", e)
    await asyncio.sleep(3)
    if hasattr(bot, "http") and bot.http.session:
        print(f"[DEBUG] HTTP session after sleep: {bot.http.session} Closed: {bot.http.session.closed}")
        if not bot.http.session.closed:
            try:
                await bot.http.session.close()
                print("[DEBUG] HTTP session closed explicitly.")
            except Exception as e:
                print("[DEBUG] Exception while closing HTTP session:", e)
        else:
            print("[DEBUG] HTTP session was already closed after sleep.")
    else:
        print("[DEBUG] No HTTP session found after sleep.")
    pending_tasks = [task for task in asyncio.all_tasks() if not task.done()]
    print("[DEBUG] Pending tasks after bot.close():", pending_tasks)
    print("[DEBUG] Propagation shutdown complete.")

async def propagate_slash_commands() -> None:
    """
    Propagate and sync guild-scoped commands.

    Clears existing global commands for the target guild, adds both the testing cog
    and the main transcription cog (if not already present), copies global commands
    to the guild's command tree, and then starts the bot.
    """
    guild = discord.Object(id=converted_guild_id)
    print("[DEBUG] Global commands before clearing:", [cmd.name for cmd in bot.tree.get_commands()])
    bot.tree.clear_commands(guild=guild)
    print("[DEBUG] Global commands after clearing for guild:", [cmd.name for cmd in bot.tree.get_commands()])
    
    await bot.add_cog(TranscriptionCommands(bot))
    if not bot.get_cog("TranscriptionCog"):
        await bot.add_cog(TranscriptionCog(bot))
    print("[DEBUG] Global commands after adding cogs:", [cmd.name for cmd in bot.tree.get_commands()])
    
    bot.tree.copy_global_to(guild=guild)
    guild_commands = bot.tree.get_commands(guild=guild)
    print("[DEBUG] Guild command tree after copying global commands:", [cmd.name for cmd in guild_commands])
    
    print("[DEBUG] Starting bot for propagation...")
    try:
        await bot.start(DISCORD_TOKEN)
    except Exception as e:
        print("[DEBUG] Exception in bot.start():", e)

def main() -> None:
    """
    Create and run a new event loop to propagate slash commands.

    Ensures that asynchronous generators are properly shutdown.
    """
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(propagate_slash_commands())
    finally:
        print("[DEBUG] Shutting down asynchronous generators...")
        loop.run_until_complete(loop.shutdown_asyncgens())
        loop.close()
        print("[DEBUG] Event loop closed.")

if __name__ == "__main__":
    main()


# ************************************************************
#  main_discord.py
# ************************************************************

"""
Main entry point for the Discord transcription bot.

This script starts the Discord bot.
"""

import asyncio
from integrations.discord_bot import run_discord_bot

async def main():
    """Run the Discord bot."""
    await run_discord_bot()

if __name__ == "__main__":
    asyncio.run(main())

